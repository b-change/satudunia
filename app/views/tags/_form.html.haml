= form_for(@tag, :html => {:class => "exp-contact-form",:id=>"new-tag-form", :multipart => true}) do |form|
  = error_messages_for(:tag)
  %br
    = form.label :name, "Name", :class => "label"
  .appender
    #appender
      = text_field_tag :new_tag,nil,:class=>"input-class",:size=>"55"
      = hidden_field_tag :my_hidden,nil,:class=>"my_hidden"

  .loader-gif
  / = form.text_field :name, :class => "textfield"
  .already-exist
    = "Tag already exists"
  = form.hidden_field :name,:class=>"tag-name-submit"
    
  %br
    = form.label :icon, :class => "label"
  .search4
    = form.file_field :icon

  %br
    = form.label :description, :class => "label"
  .search4
    = form.text_area :description, :class => "textarea", :style => "width:630px;"

  -if !(@tag.new_record? || @tag.errors[:name].blank?)
    == The tag '#{@name_changes.last}' already exists
    .field
      = check_box_tag "merge"
      == "MERGE"

:javascript
  jQuery(document).ready(function(){
    var fields = jQuery("#attachments #fields");
    var template = fields.find(".template");
    template.find("input").attr("name", "question[attachments[id]]");
    template.hide();

    jQuery("#attachments #fields .attachment_field .remove_attachment").live("click", function(e) {
      jQuery(this).parent().remove();
      return false;
    });

    jQuery(".remove_attachment_link").live("click", function(e) {
      var url = jQuery(this).attr("href");
      var remove = confirm("are you sure?"); //TODO; i18n
      if (remove) {
        jQuery.ajax({url: url, dataType: 'json', context: jQuery(this), success: function(data, textStatus, XMLHttpRequest){
          jQuery(this).parent().remove();
        }});
      }
      return false;
    });

    var count = -1;
    jQuery("#attachments .add_attachment").live("click", function(e) {
      var template = fields.find(".template");
      var new_field = template.clone();
      new_field.removeClass("template");
      count++;
      var new_name = new_field.find("input").attr("name").replace(/(id)/, count);
      new_field.find("input").attr("name",new_name)

      new_field.show();

      fields.append(new_field);

      return false;
    });

    jQuery("#ask_question_link").click(function (){
      jQuery("#ask_question").submit();
    });

    jQuery("#question_tags").ajaxChosen({
      method: 'GET',
      url: '/questions/tags_for_autocomplete.js',
      dataType: 'json'
    }, function (data) {
      var terms = {};
      jQuery.each(data, function (i, val) {
          console.log('i: '+i)
          console.log('val: '+val)
        terms[val["value"]] = val["caption"];
      });

      return terms;
    });
  });

  var valueRawArray = '#{Tag.all.map{|u|u.name}}'
  var valueArray = eval(valueRawArray);
  // new appender array
  var appenderArray =[];
  // jQuery.each(valueArray,function(key,value){
    
  // });
  jQuery(".input-class").keyup(function(evt) {
    var thisTag = jQuery(this);
    var sizeOfTag = thisTag.attr("size");
    if(sizeOfTag==55)
      thisTag.attr("size",1);
    else
      thisTag.attr("size",parseInt(sizeOfTag)+parseInt(1));
    jQuery(".already-exist").hide();
    // alert(evt.keyCode);
    if (evt.keyCode == 32) {
      var inputValueTaker = thisTag.val().trim();
      // alert(inputValueTaker.length);
      if(inputValueTaker.length !=0){
        jQuery(".my_hidden").val(inputValueTaker);
        var MatchThis = jQuery(".my_hidden").val();
        var arraySize = appenderArray.length;
        // merginig both array to create one combo array
        var combineArray = valueArray.concat(appenderArray);
        // alert(combineArray.toSource());
        var testingValueInArray = jQuery.inArray(MatchThis,combineArray);
        if(testingValueInArray<0){
          jQuery(".loader-gif").show();
          // settimeOut function
          setTimeout(function(){
            jQuery("#input-class").before("<li class='"+arraySize+" list-class'><span>"+MatchThis+"<span>&nbsp;<span class='new-close-tags'>x</span> </li>");
            // removed function
            jQuery("."+arraySize).click(function(){
                jQuery(this).fadeOut('slow',"linear");
                appenderArray.splice(arraySize,1);
                jQuery(".tag-name-submit").val(appenderArray);
            });
            appenderArray.push(MatchThis);
            // alert("Newely added "+appenderArray.toSource());
            thisTag.val("");
            // alert(valueArray.toSource());
            jQuery(".my_hidden").val("");
            jQuery(".loader-gif").hide();
            jQuery(".list-class-active").removeClass("list-class-active").addClass("list-class");
            jQuery(".tag-name-submit").val(appenderArray);
            thisTag.attr("size",1);
          },800);
          // set time out ends           
        }
        else{
            jQuery(".list-class-active").removeClass("list-class-active").addClass("list-class");
            var activeValueTaker = jQuery.inArray(MatchThis,appenderArray);
            if(activeValueTaker<0)
              jQuery(".already-exist").show();
            jQuery("."+activeValueTaker).removeClass("list-class").addClass("list-class-active");
            thisTag.val(""); 
            jQuery(".my_hidden").val("");
            jQuery(".tag-name-submit").val(appenderArray);
        }
      }
      // if lenght not is equal to zero  ends here
    }
          
  });